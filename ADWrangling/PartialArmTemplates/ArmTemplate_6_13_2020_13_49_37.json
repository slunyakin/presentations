{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADWrangling"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDataFlow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "Customer",
							"script": "",
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							}
						},
						{
							"name": "transaction",
							"script": "",
							"dataset": {
								"referenceName": "transaction",
								"type": "DatasetReference"
							}
						},
						{
							"name": "zip_codes",
							"script": "",
							"dataset": {
								"referenceName": "zip_codes",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "Result",
								"type": "DatasetReference"
							},
							"script": "sink(input(\n\t\tstate as string,\n\t\tproduct as string,\n\t\tcount as string,\n\t\ttotal as string,\n\t\tminprice as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared Customer = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/lab_customers.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared transaction = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/transactions/lab_2010_transactions.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared zip_codes = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/zip_to_state_map.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \"\t\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv])\r\nin\r\n  Csv;\r\nshared UserQuery = let\r\n  Source = transaction,\r\n  #\"Replaced basic\" = Table.ReplaceValue(Source, \"basic\", \"silver\", Replacer.ReplaceText, {\"product\"}),\r\n  #\"Replaced deluxe\" = Table.ReplaceValue(#\"Replaced basic\", \"deluxe\", \"gold\", Replacer.ReplaceText, {\"product\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Replaced deluxe\", \"disc\", each if [discount] = \"5%\" then 0.95 else if [discount] = \"10%\" then 0.9 else if [discount] = \"20%\" then 0.8 else 1),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Inserted conditional column\", {\"discount\"}),\r\n  #\"Merged queries\" = Table.NestedJoin(#\"Removed columns\", {\"customer_id\"}, Customer, {\"customer_id\"}, \"Customer\", JoinKind.LeftOuter),\r\n  #\"Expanded Customer\" = Table.ExpandTableColumn(#\"Merged queries\", \"Customer\", {\"address_state\", \"address_zip\", \"start_date\", \"end_date\"}, {\"address_state\", \"address_zip\", \"start_date\", \"end_date\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Expanded Customer\", {{\"customer_id\", type text}, {\"transaction_date\", type date}, {\"ticket_price\", type number}}),\r\n  #\"Replaced value\" = Table.ReplaceValue(#\"Changed column type\", \"\", \"2050/12/31\", Replacer.ReplaceValue, {\"end_date\"}),\r\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Replaced value\", {{\"end_date\", type date}, {\"start_date\", type date}}),\r\n  #\"Inserted conditional column 1\" = Table.AddColumn(#\"Changed column type 1\", \"ActiveTrans\", each if [transaction_date] >= [start_date] then 1 else if [transaction_date] <= [end_date] then 1 else 0),\r\n  #\"Filtered rows\" = Table.SelectRows(#\"Inserted conditional column 1\", each [ActiveTrans] = 1),\r\n  #\"Changed column type 2\" = Table.TransformColumnTypes(#\"Filtered rows\", {{\"disc\", type number}}),\r\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Changed column type 2\", each [ticket_price] >= 1),\r\n  #\"Added custom\" = Table.AddColumn(#\"Filtered rows 1\", \"AdjustedPrice\", each [ticket_price] * [disc]),\r\n  #\"Merged queries 1\" = Table.NestedJoin(#\"Added custom\", {\"address_zip\"}, zip_codes, {\"Column1\"}, \"zip_codes\", JoinKind.LeftOuter),\r\n  #\"Expanded zip_codes\" = Table.ExpandTableColumn(#\"Merged queries 1\", \"zip_codes\", {\"Column2\"}, {\"Column2\"}),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Expanded zip_codes\", {{\"Column2\", \"State\"}}),\r\n  #\"Grouped rows\" = Table.Group(#\"Renamed columns\", {\"State\", \"product\"}, {{\"Count\", each Table.RowCount(_), type number}, {\"Total\", each List.Sum([AdjustedPrice]), type any}, {\"MinPrice\", each List.Min([AdjustedPrice]), type any}})\r\nin\r\n  #\"Grouped rows\";\r\n"
				}
			},
			"dependsOn": []
		}
	]
}