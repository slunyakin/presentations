{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADWrangling"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"MyBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MyBlobStorage'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsgen2slun.dfs.core.windows.net"
		},
		"DestinationDataset_hf8_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_hf8_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "refineddata"
		},
		"SourceDataset_hf8_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"SourceDataset_hf8_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "dataflow/Data"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('MyBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lab_customers.csv",
						"folderPath": "Wrangling/Sales",
						"fileSystem": "refineddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "curent_credit_card",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "address_street_number",
						"type": "String"
					},
					{
						"name": "address_city",
						"type": "String"
					},
					{
						"name": "address_state",
						"type": "String"
					},
					{
						"name": "address_zip",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "phone_number",
						"type": "String"
					},
					{
						"name": "start_date",
						"type": "String"
					},
					{
						"name": "end_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_hf8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"fileName": "[parameters('DestinationDataset_hf8_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_hf8_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "result"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "product",
						"type": "String"
					},
					{
						"name": "count",
						"type": "String"
					},
					{
						"name": "total",
						"type": "String"
					},
					{
						"name": "minprice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Result2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "result"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "product",
						"type": "String"
					},
					{
						"name": "count",
						"type": "String"
					},
					{
						"name": "total",
						"type": "String"
					},
					{
						"name": "minprice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_hf8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": "[parameters('SourceDataset_hf8_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_hf8_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Wrangling/Sales/transactions",
						"fileSystem": "refineddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "transaction_date",
						"type": "String"
					},
					{
						"name": "ticket_price",
						"type": "String"
					},
					{
						"name": "discount",
						"type": "String"
					},
					{
						"name": "product",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_codes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "zip_to_state_map.csv",
						"folderPath": "Wrangling/Sales",
						"fileSystem": "refineddata"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyADLSGen1ToGen2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_hf8",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "demo/contosodw/"
							},
							{
								"name": "Destination",
								"value": "refineddata/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "AzureBlobFSSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hf8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_hf8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hf8')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_hf8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDataFlow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "transaction",
							"script": "",
							"dataset": {
								"referenceName": "transaction",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						},
						{
							"name": "Customer",
							"script": "",
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						},
						{
							"name": "zip_codes",
							"script": "",
							"dataset": {
								"referenceName": "zip_codes",
								"type": "DatasetReference"
							},
							"typeProperties": {
								"readMode": null
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "Result",
								"type": "DatasetReference"
							},
							"script": "sink(input(\n\t\tstate as string,\n\t\tproduct as string,\n\t\tcount as string,\n\t\ttotal as string,\n\t\tminprice as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared transaction = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/transactions/lab_2010_transactions.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared Customer = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/lab_customers.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared zip_codes = let\r\n  AdfDoc = AzureStorage.DataLakeContents(\"https://adlsgen2slun.dfs.core.windows.net/refineddata/Wrangling/Sales/zip_to_state_map.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \"\t\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv])\r\nin\r\n  Csv;\r\nshared UserQuery = let\r\n  Source = transaction,\r\n  #\"Replaced value\" = Table.ReplaceValue(Source, \"basic\", \"silver\", Replacer.ReplaceText, {\"product\"}),\r\n  #\"Replaced value 1\" = Table.ReplaceValue(#\"Replaced value\", \"deluxe\", \"gold\", Replacer.ReplaceText, {\"product\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Replaced value 1\", \"disc\", each if [discount] = \"5%\" then 0.95 else if [discount] = \"10%\" then 0.9 else if [discount] = \"20%\" then 0.8 else 1),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Inserted conditional column\", {\"discount\"}),\r\n  #\"Merged queries\" = Table.NestedJoin(#\"Removed columns\", {\"customer_id\"}, Customer, {\"customer_id\"}, \"Customer\", JoinKind.LeftOuter),\r\n  #\"Expanded Customer\" = Table.ExpandTableColumn(#\"Merged queries\", \"Customer\", {\"address_state\", \"address_zip\", \"start_date\", \"end_date\"}, {\"address_state\", \"address_zip\", \"start_date\", \"end_date\"}),\r\n  #\"Replaced value 2\" = Table.ReplaceValue(#\"Expanded Customer\", \"\", \"2050/01/01\", Replacer.ReplaceValue, {\"end_date\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Replaced value 2\", {{\"start_date\", type date}, {\"end_date\", type date}, {\"transaction_date\", type date}}),\r\n  #\"Inserted conditional column 1\" = Table.AddColumn(#\"Changed column type\", \"ActiveTrans\", each if [transaction_date] >= [start_date] then 1 else if [transaction_date] <= [end_date] then 1 else 0),\r\n  #\"Filtered rows\" = Table.SelectRows(#\"Inserted conditional column 1\", each [ActiveTrans] = 1),\r\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Filtered rows\", {{\"ticket_price\", type number}}),\r\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Changed column type 1\", each [ticket_price] >= 1),\r\n  AdjustedPrice = Table.AddColumn(#\"Filtered rows 1\", \"Adjusted_Price\", each [ticket_price] * [disc]),\r\n  #\"Merged queries 1\" = Table.NestedJoin(AdjustedPrice, {\"address_zip\"}, zip_codes, {\"Column1\"}, \"zip_codes\", JoinKind.LeftOuter),\r\n  #\"Expanded zip_codes\" = Table.ExpandTableColumn(#\"Merged queries 1\", \"zip_codes\", {\"Column2\"}, {\"Column2\"}),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Expanded zip_codes\", {{\"Column2\", \"state\"}}),\r\n  #\"Grouped rows\" = Table.Group(#\"Renamed columns\", {\"state\", \"product\"}, {{\"Count\", each Table.RowCount(_), type number}, {\"Total\", each List.Sum([Adjusted_Price]), type any}, {\"MinPrice\", each List.Min([Adjusted_Price]), type any}})\r\nin\r\n  #\"Filtered rows 1\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/transaction')]",
				"[concat(variables('factoryId'), '/datasets/Customer')]",
				"[concat(variables('factoryId'), '/datasets/zip_codes')]",
				"[concat(variables('factoryId'), '/datasets/Result')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WranglingDataFlow2",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WranglingDataFlow2",
								"type": "DataFlowReference",
								"datasetParameters": {
									"transaction": {},
									"Customer": {},
									"zip_codes": {},
									"Sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WranglingDataFlow2')]"
			]
		}
	]
}